version: "3"

silent: true

vars:
  TASK_BINARY: task # the name of the task executable (can sometimes be go-task)
  # TEST_ARCHS: ["x86_64-unknown-linux-gnu", "i686-unknown-linux-gnu", "aarch64-unknown-linux-gnu", "armv7-unknown-linux-gnueabi", "x86_64-pc-windows-gnu"]
  # ^ waiting for task to support global variables properly

tasks:
  install-cargo-tools:
    desc: Install all of the cargo prerequisites
    cmds:
      - cargo install cargo-nextest cargo-audit cargo-hack cargo-watch
      - cmd: rustup +nightly
        platforms: [amd64]
      - cmd: rustup +nightly component add miri rust-analyzer
        platforms: [amd64]
      - cmd: cargo install cross --git https://github.com/cross-rs/cross
        platforms: [amd64]

  install-cargo-tools-extras:
    desc: Install extra (but very helpful) tools
    cmds:
      - cargo install cargo-llvm-lines cargo-expand cargo-show-asm cargo-unused-features cargo-msrv cargo-generate cargo-criterion zellij

  build:
    cmds:
      - cargo build --release --all-features --all-targets
  docs:
    cmds:
      - cargo doc --release --all-features --document-private-items --open
  audit:
    cmds:
      - cargo audit

  # testing
  watch:
    desc: Watch the current package for code changes and run tests on every change
    cmds:
      - cargo watch -cx 'nextest run --release'

  miri:
    platforms: [amd64]
    desc: Run all tests for the current package with miri
    cmds:
      - cargo +nightly miri nextest run -j12 --features blake3/no_sse2

  check-features:
    desc: Check every combination of features to ensure that they are all compatible, regardless of which are enabled
    cmds:
      - cargo hack check --feature-powerset

  test:
    desc: Run tests with all features on the current host
    cmds:
      - cargo nextest run --release --all-features

  test-all:
    desc: Run tests
    cmds:
      - cargo nextest run --release --all-features --run-ignored all

  cross-test:
    desc: Requires either docker or podman for `cross`
    platforms: [amd64]
    internal: true
    requires:
      vars: [TARGET]
    cmds:
      - cross +nightly test --release --all-targets --all-features --target {{.TARGET}}

  test-all-architectures:
    platforms: [amd64]
    internal: true
    cmds:
      - for:
          [
            "x86_64-unknown-linux-gnu",
            "i686-unknown-linux-gnu",
            "aarch64-unknown-linux-gnu",
            "armv7-unknown-linux-gnueabi",
            "x86_64-pc-windows-gnu",
          ]
        task: cross-test
        vars:
          TARGET: "{{.ITEM}}"

  ci:
    deps: [clean]
    cmds:
      - cargo clippy --release --all-features --all-targets
      - task: check-features
      - task: test-all-architectures
      - task: miri
      - task: test-all

  # cleaning output dirs
  clean:
    run: once
    desc: Clean all output directories (on Windows, only the top-level `node_modules` is removed).
    cmds:
      - cargo clean
      - cmd: find ../../ -name "node_modules" -type d -prune -exec rm -rf "{}" \;
        platforms: [darwin, linux]
      - cmd: find ../../ -name "dist" -type d -prune -exec rm -rf "{}/*" \;
        platforms: [darwin, linux]
      - cmd: rmdir /s /q ..\..\node_modules
        platforms: [windows]
  aliases: [c]

  rm-sd-dir:
    cmds:
      - cmd: rm -rf "$HOME/Library/Application Support/spacedrive/"
        platforms: [darwin]
      - cmd: rm -rf "$HOME/.local/share/spacedrive/"
        platforms: [linux]
      - cmd: rmdir /s /q "{{.USERPROFILE}}/AppData/Roaming/spacedrive/" #?????
        platforms: [windows]
        # prompt: This is untested, are you sure you'd like to run?
    aliases: [rmsddir]

  rm-dot-sd:
    dir: "$HOME"
    cmds:
      - cmd: find . -name ".spacedrive" -type f -prune -exec echo "Removing {}" \; -exec rm -rf "{}" \;
        platforms: [darwin, linux]
    aliases: [rmdotsd]

  # setup stuff
  setup:
    desc: Runs pnpm i, prep, and any additional setup scripts
    cmds:
      - pnpm i
      - pnpm prep
      - task: setup-extras
    aliases: [s]

  setup-extras:
    internal: true
    cmds:
      - cmd: ../../.github/scripts/setup-system.sh
        platforms: [darwin]
      - cmd: ../../github/scripts/setup-system.ps1
        platforms: [windows]
