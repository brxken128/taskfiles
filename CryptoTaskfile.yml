version: "3"

silent: true

vars:
  TASK_BINARY: task # the name of the task executable (can sometimes be go-task)
  # RELATIVE_REPO_ROOT: '{{fromSlash "../../"}}'
  # ^ ideally we'd be able to use git to get this and pass it to each
  # TEST_ARCHS: ["x86_64-unknown-linux-gnu", "i686-unknown-linux-gnu", "aarch64-unknown-linux-gnu", "armv7-unknown-linux-gnueabi", "x86_64-pc-windows-gnu"]
  # ^ waiting for task to support global variables properly
  REMOTE_TASKFILE_NAME: CryptoTaskfile.yml
  REMOTE_TASKFILE_URL: "https://raw.githubusercontent.com/brxken128/taskfiles/main/{{.REMOTE_TASKFILE_NAME}}"
  REPO_ROOT:
    sh: "git rev-parse --show-toplevel"

tasks:
  default:
    desc: Lists all commands
    cmd: "{{.TASK_BINARY}} --list-all"

  install-cargo-tools:
    desc: Install all of the cargo prerequisites
    cmds:
      - cargo install cargo-nextest cargo-audit cargo-hack cargo-watch b3sum
      - cmd: rustup +nightly
        platforms: [amd64]
      - cmd: rustup +nightly component add miri rust-analyzer
        platforms: [amd64]
      - cmd: cargo install cross --git https://github.com/cross-rs/cross
        platforms: [amd64]

  install-cargo-tools-extras:
    desc: Install extra (but very helpful) tools
    cmds:
      - cargo install cargo-llvm-lines cargo-expand cargo-show-asm cargo-unused-features cargo-msrv cargo-generate cargo-criterion zellij hyperfine fd-find

  build:
    cmds:
      - cargo build --release --all-features --all-targets
  docs:
    cmds:
      - cargo doc --release --all-features --document-private-items --open
  audit:
    dir: "{{.REPO_ROOT}}"
    cmds:
      - cargo audit

  # testing
  watch:
    desc: Watch the current package for code changes and run tests on every change
    cmds:
      - cargo watch -cx 'nextest run --release --no-fail-fast'

  miri:
    platforms: [amd64]
    desc: Run all tests for the current package with miri
    cmds:
      - cargo +nightly miri nextest run -j12 --features blake3/no_sse2

  check-features:
    desc: Check every combination of features to ensure that they are all compatible, regardless of which are enabled
    cmds:
      - cargo hack check --feature-powerset

  test:
    desc: Run tests
    cmds:
      - cargo nextest run --release --all-features

  test-all:
    desc: Run all tests (including ignored) with all features
    cmds:
      - cargo nextest run --release --all-features --run-ignored all

  cross-test:
    desc: Requires either docker or podman for `cross`
    platforms: [amd64]
    internal: true
    requires:
      vars: [TARGET]
    cmds:
      - cross +nightly test --release --all-targets --all-features --target {{.TARGET}}

  test-all-architectures:
    platforms: [amd64]
    internal: true
    cmds:
      - for:
          [
            "x86_64-unknown-linux-gnu",
            "i686-unknown-linux-gnu",
            "aarch64-unknown-linux-gnu",
            "armv7-unknown-linux-gnueabi",
            "x86_64-pc-windows-gnu",
          ]
        task: cross-test
        vars:
          TARGET: "{{.ITEM}}"

  ci:
    deps: [clean]
    cmds:
      - cargo clippy --release --all-features --all-targets
      - task: check-features
      - task: test-all-architectures
      - task: miri
      - task: test-all

  internal-clean:
    internal: true
    cmds:
      - cmd: fd -gIH --exclude ".git" --exclude ".github" --prune "{{.NAME}}" . -x rm -rf "{{.RM}}" \; -x echo "Removing {{.RM}}" \;
        platforms: [darwin, linux]

  # cleaning output dirs
  clean:
    desc: Clean all output directories (on Windows, only the top `node_modules` is removed).
    cmds:
      # unix
      - cmd: until cargo clean; do; done
        platforms: [darwin, linux, windows]

    aliases: [c]

  update:
    desc: Updates and overrides the current Taskfile from Github
    cmds:
      - 'echo "Pre-update hash: " && b3sum --no-names Taskfile.yml'
      - curl -s -o Taskfile.yml "{{.REMOTE_TASKFILE_URL}}"
      - 'echo "Post-update hash: " && b3sum --no-names Taskfile.yml'
